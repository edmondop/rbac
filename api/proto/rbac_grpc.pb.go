// Protobuf definition for RBAC system

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/rbac.proto

package rbacservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RbacService_AddPolicy_FullMethodName          = "/edmondop.api.rbac.v1.RbacService/AddPolicy"
	RbacService_AssignPolicy_FullMethodName       = "/edmondop.api.rbac.v1.RbacService/AssignPolicy"
	RbacService_UnassignPolicy_FullMethodName     = "/edmondop.api.rbac.v1.RbacService/UnassignPolicy"
	RbacService_UpdatePolicy_FullMethodName       = "/edmondop.api.rbac.v1.RbacService/UpdatePolicy"
	RbacService_AuthorizeAction_FullMethodName    = "/edmondop.api.rbac.v1.RbacService/AuthorizeAction"
	RbacService_AddUserToRole_FullMethodName      = "/edmondop.api.rbac.v1.RbacService/AddUserToRole"
	RbacService_RemoveUserFromRole_FullMethodName = "/edmondop.api.rbac.v1.RbacService/RemoveUserFromRole"
	RbacService_GetRolesForUser_FullMethodName    = "/edmondop.api.rbac.v1.RbacService/GetRolesForUser"
)

// RbacServiceClient is the client API for RbacService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbacServiceClient interface {
	AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*PolicyIdResponse, error)
	AssignPolicy(ctx context.Context, in *AssignPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnassignPolicy(ctx context.Context, in *UnassignPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AuthorizeAction(ctx context.Context, in *AuthorizeActionRequest, opts ...grpc.CallOption) (*AuthorizeActionResponse, error)
	AddUserToRole(ctx context.Context, in *AddUserToRoleRequest, opts ...grpc.CallOption) (*AddUserToRoleResponse, error)
	RemoveUserFromRole(ctx context.Context, in *RemoveUserFromRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...grpc.CallOption) (*GetRolesForUserResponse, error)
}

type rbacServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacServiceClient(cc grpc.ClientConnInterface) RbacServiceClient {
	return &rbacServiceClient{cc}
}

func (c *rbacServiceClient) AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*PolicyIdResponse, error) {
	out := new(PolicyIdResponse)
	err := c.cc.Invoke(ctx, RbacService_AddPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) AssignPolicy(ctx context.Context, in *AssignPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RbacService_AssignPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) UnassignPolicy(ctx context.Context, in *UnassignPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RbacService_UnassignPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RbacService_UpdatePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) AuthorizeAction(ctx context.Context, in *AuthorizeActionRequest, opts ...grpc.CallOption) (*AuthorizeActionResponse, error) {
	out := new(AuthorizeActionResponse)
	err := c.cc.Invoke(ctx, RbacService_AuthorizeAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) AddUserToRole(ctx context.Context, in *AddUserToRoleRequest, opts ...grpc.CallOption) (*AddUserToRoleResponse, error) {
	out := new(AddUserToRoleResponse)
	err := c.cc.Invoke(ctx, RbacService_AddUserToRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) RemoveUserFromRole(ctx context.Context, in *RemoveUserFromRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RbacService_RemoveUserFromRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacServiceClient) GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...grpc.CallOption) (*GetRolesForUserResponse, error) {
	out := new(GetRolesForUserResponse)
	err := c.cc.Invoke(ctx, RbacService_GetRolesForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacServiceServer is the server API for RbacService service.
// All implementations must embed UnimplementedRbacServiceServer
// for forward compatibility
type RbacServiceServer interface {
	AddPolicy(context.Context, *AddPolicyRequest) (*PolicyIdResponse, error)
	AssignPolicy(context.Context, *AssignPolicyRequest) (*emptypb.Empty, error)
	UnassignPolicy(context.Context, *UnassignPolicyRequest) (*emptypb.Empty, error)
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*emptypb.Empty, error)
	AuthorizeAction(context.Context, *AuthorizeActionRequest) (*AuthorizeActionResponse, error)
	AddUserToRole(context.Context, *AddUserToRoleRequest) (*AddUserToRoleResponse, error)
	RemoveUserFromRole(context.Context, *RemoveUserFromRoleRequest) (*emptypb.Empty, error)
	GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserResponse, error)
	mustEmbedUnimplementedRbacServiceServer()
}

// UnimplementedRbacServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRbacServiceServer struct {
}

func (UnimplementedRbacServiceServer) AddPolicy(context.Context, *AddPolicyRequest) (*PolicyIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (UnimplementedRbacServiceServer) AssignPolicy(context.Context, *AssignPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPolicy not implemented")
}
func (UnimplementedRbacServiceServer) UnassignPolicy(context.Context, *UnassignPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignPolicy not implemented")
}
func (UnimplementedRbacServiceServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedRbacServiceServer) AuthorizeAction(context.Context, *AuthorizeActionRequest) (*AuthorizeActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeAction not implemented")
}
func (UnimplementedRbacServiceServer) AddUserToRole(context.Context, *AddUserToRoleRequest) (*AddUserToRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToRole not implemented")
}
func (UnimplementedRbacServiceServer) RemoveUserFromRole(context.Context, *RemoveUserFromRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromRole not implemented")
}
func (UnimplementedRbacServiceServer) GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (UnimplementedRbacServiceServer) mustEmbedUnimplementedRbacServiceServer() {}

// UnsafeRbacServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RbacServiceServer will
// result in compilation errors.
type UnsafeRbacServiceServer interface {
	mustEmbedUnimplementedRbacServiceServer()
}

func RegisterRbacServiceServer(s grpc.ServiceRegistrar, srv RbacServiceServer) {
	s.RegisterService(&RbacService_ServiceDesc, srv)
}

func _RbacService_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_AddPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).AddPolicy(ctx, req.(*AddPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_AssignPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).AssignPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_AssignPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).AssignPolicy(ctx, req.(*AssignPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_UnassignPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).UnassignPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_UnassignPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).UnassignPolicy(ctx, req.(*UnassignPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_UpdatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_AuthorizeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).AuthorizeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_AuthorizeAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).AuthorizeAction(ctx, req.(*AuthorizeActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_AddUserToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).AddUserToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_AddUserToRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).AddUserToRole(ctx, req.(*AddUserToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_RemoveUserFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).RemoveUserFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_RemoveUserFromRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).RemoveUserFromRole(ctx, req.(*RemoveUserFromRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacService_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServiceServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RbacService_GetRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServiceServer).GetRolesForUser(ctx, req.(*GetRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RbacService_ServiceDesc is the grpc.ServiceDesc for RbacService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RbacService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edmondop.api.rbac.v1.RbacService",
	HandlerType: (*RbacServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPolicy",
			Handler:    _RbacService_AddPolicy_Handler,
		},
		{
			MethodName: "AssignPolicy",
			Handler:    _RbacService_AssignPolicy_Handler,
		},
		{
			MethodName: "UnassignPolicy",
			Handler:    _RbacService_UnassignPolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _RbacService_UpdatePolicy_Handler,
		},
		{
			MethodName: "AuthorizeAction",
			Handler:    _RbacService_AuthorizeAction_Handler,
		},
		{
			MethodName: "AddUserToRole",
			Handler:    _RbacService_AddUserToRole_Handler,
		},
		{
			MethodName: "RemoveUserFromRole",
			Handler:    _RbacService_RemoveUserFromRole_Handler,
		},
		{
			MethodName: "GetRolesForUser",
			Handler:    _RbacService_GetRolesForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rbac.proto",
}
